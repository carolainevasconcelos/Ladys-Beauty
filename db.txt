-- Cria o banco de dados se ele não existir
CREATE DATABASE IF NOT EXISTS SistemaAgendamentos;

-- Define o banco de dados a ser utilizado
USE SistemaAgendamentos;

-- Tabela de Clientes
CREATE TABLE IF NOT EXISTS clientes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    telefone VARCHAR(15) NOT NULL,
    senha_hash VARCHAR(255) NOT NULL,
    saldo_pontos INT DEFAULT 0
);

-- Tabela de Funcionários
CREATE TABLE IF NOT EXISTS funcionarios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    telefone VARCHAR(15) NOT NULL,
    cargo ENUM('administrador', 'funcionario') NOT NULL DEFAULT 'funcionario',
    especialidade ENUM('cabelos', 'unhas', 'maquiagem', 'sobrancelhas', 'depilacao') DEFAULT NULL,
    senha_hash VARCHAR(255) NOT NULL
);

-- Tabela de Serviços
CREATE TABLE IF NOT EXISTS servicos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    descricao TEXT,
    preco DECIMAL(10,2) NOT NULL,
    pontos_ganho INT DEFAULT 0,       -- Pontos que o cliente ganha ao pagar pelo serviço
    pontos_resgate INT DEFAULT 0,     -- Pontos que o cliente precisa para resgatar o serviço
    funcionario_id INT NOT NULL,
    categoria ENUM('unha', 'cabelo', 'maquiagem', 'sobrancelhas', 'depilacao') NOT NULL,
    status ENUM('ativo', 'inativo') DEFAULT 'ativo',
    FOREIGN KEY (funcionario_id) REFERENCES funcionarios(id) ON DELETE CASCADE
);

-- Tabela de Agendamentos
CREATE TABLE IF NOT EXISTS agendamentos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    cliente_id INT NOT NULL,
    funcionario_id INT NULL,
    servico_id INT NOT NULL,
    data_agendamento DATE NOT NULL,
    hora_agendamento TIME NOT NULL,
    statu ENUM('agendado', 'cancelado', 'concluido'),
    pagamento_pontos ENUM('sim', 'nao'),
    FOREIGN KEY (cliente_id) REFERENCES clientes(id) ON DELETE CASCADE,
    FOREIGN KEY (funcionario_id) REFERENCES funcionarios(id) ON DELETE SET NULL,
    FOREIGN KEY (servico_id) REFERENCES servicos(id) ON DELETE CASCADE
);

-- Adiciona uma restrição para garantir que um funcionário só pode ter um agendamento por horário
ALTER TABLE agendamentos
ADD CONSTRAINT uq_funcionario_data_hora UNIQUE (funcionario_id, data_agendamento, hora_agendamento);

-- Tabela de Notificações
CREATE TABLE IF NOT EXISTS notificacoes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    usuario_id INT NOT NULL,             -- ID do cliente ou funcionário
    tipo_usuario VARCHAR(20) NOT NULL,   -- 'cliente' ou 'funcionario'
    assunto VARCHAR(255) NOT NULL,
    mensagem TEXT NOT NULL,
    data_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    lida BOOLEAN DEFAULT FALSE,
    agendamento_id INT NULL DEFAULT NULL -- Coluna para vincular notificação a um agendamento
);

-- Adiciona a chave estrangeira para vincular a notificação a um agendamento
ALTER TABLE notificacoes
ADD CONSTRAINT fk_notificacao_agendamento
FOREIGN KEY (agendamento_id) REFERENCES agendamentos(id)
ON DELETE SET NULL;